package Ships;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;

import Frame.Space;
import Objects.Resource;
import Objects.SpaceOBJ;

/**
 * 
 */


public class MotherShip extends Ship{

	
	private int totalRescources = 1000;
	private int MASS =200;
	private boolean player=false;
	private boolean movingUp=false, movingDown=false,movingLeft=false,movingRight=false;
	private Space space;
	
	public MotherShip(int x,int y,Space space,Color t){
		super(space,x,y,50,55,t);
		this.team=t;
		this.x = x;
		this.y = y;
		this.space = space;
		
		name = "MotherShip";
		health = 1000;
		
		xLim = 50;yLim=50;
		if(player){
		addKeyListener(this);
		this.setFocusable(true);
		this.requestFocus();
		}
	}
	
	public void paintComponent(Graphics g){
		Graphics g2 = (Graphics2D) g;
		g2.setColor(team);
		g2.fillRect(0,5,xLim,yLim-5);
		paintOutline(g);
		drawHealth(g);
	}
	
	public void control(){
		if(player){
		if(movingUp){y=y-20;}if(movingDown){y=y+20;}if(movingLeft){x=x-20;}if(movingRight){x=x+20;}
		checkBoundary();
		}
		else{return;}
	}
	
	public int getMass(){return MASS;}
	
	public void create(Ship s){
		s.setX(x+xLim+50);
		s.setY(y);
		space.objects.add(s);
		
	}

	public int getTotalResources() {
		return totalRescources;
	}

	public void setTotalResources(int totalRescources) {
		this.totalRescources = totalRescources;
	}
	
	public Resource getClosestResource(){
		Resource result = null;
		for(Resource r : space.resources){
			if(result == null){result = r;}
			else if(space.getDistance(this,r) < space.getDistance(this,result)){
				result = r;
			}
		}
		
		return result;
		
	}
	
	public Ship getClosestEnemyShip(){
		SpaceOBJ result = null;
		for(SpaceOBJ obj: space.playerFleet){
			if(obj.team()==Color.blue){
				if(result == null){result = obj;}
				else if(space.getDistance(this,obj) < space.getDistance(this,result)){
					result = obj;
				}
			}
		}
		
		return (Ship)result;
		
	}
}
